networks:
  frontend:
    external: true
  app:
    driver: bridge
    internal: false

services:
  openwebui:
    build:
      dockerfile: Dockerfile
      context: open-webui
      args:
        USE_CUDA: false
        USE_OLLAMA: false
    command: [ "bash", "start.sh"]
    environment:
      # See https://docs.openwebui.com/getting-started/env-configuration/
      GLOBAL_LOG_LEVEL: DEBUG
      DATA_DIR: /app/backend/data
      ENV: dev
      PORT: 8080
      # Disable ollama as default, prevent UI from freezing when not avaible on localhost. 
      ENABLE_OLLAMA_API: false
      OLLAMA_BASE_URL: 'http://localhost:11434'
      # Disable OpenAI.
      ENABLE_OPENAI_API: false
      # Postgress setup
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres
    networks:
      - app
      - frontend
    ports:
      - "8080"
    depends_on:
      postgres:
        condition: service_healthy
    cap_add:
      - SYS_ADMIN
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./open-webui/backend:/app/backend
      - ./open-webui/build:/app/build
      - .docker/start.sh:/app/start.sh
      - .docker/data/storage:/app/backend/data
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=frontend"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.rule=Host(`${COMPOSE_DOMAIN}`)"
  #      HTTPS config - uncomment to enable redirect from :80 to :443
  #      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.middlewares=redirect-to-https"
  #      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_HOST: localhost
    networks:
      - app
    ports:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - .docker/data/postgres:/var/lib/postgresql/data 

  node:
    image: node:22-alpine3.20
    working_dir: /app
    command: npm run check:watch
    volumes:
      - ./open-webui:/app

  tika:
    build:
      dockerfile: Dockerfile
      context: .docker/tika
    networks:
      - app
    ports:
      - "9998"
