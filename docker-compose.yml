include:
  - docker-compose.oidc.yml

networks:
  frontend:
    external: true
  app:
    driver: bridge
    internal: false

services:
  openwebui:
    build:
      dockerfile: Dockerfile
      context: open-webui
      platforms:
        - "linux/amd64"
      args:
        USE_CUDA: false
        USE_OLLAMA: false
    command: [ "bash", "start.sh"]
    environment:
      # See https://docs.openwebui.com/getting-started/env-configuration/
      GLOBAL_LOG_LEVEL: ${GLOBAL_LOG_LEVEL:-INFO}
      DATA_DIR: /app/backend/data
      ENV: ${ENV_MODE:-dev}
      PORT: 8080
      WEBUI_NAME: "ITK AI Platform"
      WEBUI_URL: "https://${COMPOSE_DOMAIN}"
      CORS_ALLOW_ORIGIN: ${CORS_ALLOW_ORIGIN:-*}
      USER_AGENT: ${USER_AGENT:-'Aarhus Kommune AI'}
      # Language/local
      DEFAULT_LOCALE: ${DEFAULT_LOCALE:-en-GB}
      # OPEN TELEMETRY
      ENABLE_OTEL: ${ENABLE_OTEL:-false}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://alloy:4317}
      OTEL_EXPORTER_OTLP_INSECURE: ${OTEL_EXPORTER_OTLP_INSECURE-false}
      OTEL_BASIC_AUTH_USERNAME: ${OTEL_BASIC_AUTH_USERNAME-""}
      OTEL_BASIC_AUTH_PASSWORD: ${OTEL_BASIC_AUTH_PASSWORD-""}
      # OIDC
      ENABLE_SIGNUP: ${ENABLE_SIGNUP:-false}
      ENABLE_LOGIN_FORM: ${ENABLE_LOGIN_FORM:-false}
      ENABLE_OAUTH_SIGNUP: true
      # Important: Only use for AAK SSO/OIDC as we need to be able to trust the email provided!
      # Docs: "This is considered insecure as not all OAuth providers verify email addresses, and may allow accounts to be hijacked."
      # @see https://docs.openwebui.com/features/sso/#oauth
      OAUTH_MERGE_ACCOUNTS_BY_EMAIL: true
      OAUTH_CLIENT_ID: ${OAUTH_CLIENT_ID}
      OAUTH_CLIENT_SECRET: ${OAUTH_CLIENT_SECRET}
      OPENID_PROVIDER_URL: ${OPENID_PROVIDER_URL}
      OAUTH_PROVIDER_NAME: ${OAUTH_PROVIDER_NAME}
      # Change the default claims mapping.
      OAUTH_EMAIL_CLAIM: ${OAUTH_EMAIL_CLAIM:-upn}
      OAUTH_ROLES_CLAIM: ${OAUTH_ROLES_CLAIM:-role}
      OAUTH_GROUPS_CLAIM: ${OAUTH_ROLES_CLAIM:-groups}
      ENABLE_OAUTH_ROLE_MANAGEMENT: ${ENABLE_OAUTH_ROLE_MANAGEMENT:-true}
      ENABLE_OAUTH_GROUP_MANAGEMENT: ${ENABLE_OAUTH_GROUP_MANAGEMENT:-true}
      ENABLE_OAUTH_GROUP_CREATION: ${ENABLE_OAUTH_GROUP_CREATION:-true}
      OAUTH_ALLOWED_ROLES: ${OAUTH_ALLOWED_ROLES:-admin,builder,user}
      OAUTH_ADMIN_ROLES: ${OAUTH_ADMIN_ROLES:-admin}
      WEBUI_SECRET_KEY: ${WEBUI_SECRET_KEY}
      # RAG
      RAG_EMBEDDING_MODEL: ${RAG_EMBEDDING_MODEL:-intfloat/multilingual-e5-large}
      # Disable ollama as default, prevent UI from freezing when not available on localhost.
      ENABLE_OLLAMA_API: false
      OLLAMA_BASE_URL: 'http://localhost:11434'
      # Disable OpenAI.
      ENABLE_OPENAI_API: false
      # Disable direct connections (do not allow users to connect to new servers)
      ENABLE_DIRECT_CONNECTIONS: ${ENABLE_DIRECT_CONNECTIONS:-false}
      # User profile notification webhooks
      ENABLE_USER_WEBHOOKS: ${ENABLE_USER_WEBHOOKS:-false}
      # Disable api key generation (in user profile)
      ENABLE_API_KEY: ${ENABLE_API_KEY:-false}
      # Sharing
      ENABLE_COMMUNITY_SHARING: ${ENABLE_COMMUNITY_SHARING:-false}
      # Disable image capture
      USER_PERMISSIONS_CHAT_IMAGE_CAPTURE: ${USER_PERMISSIONS_CHAT_IMAGE_CAPTURE:-false}
      # Postgres setup
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres
      # MinIO configuration
      STORAGE_PROVIDER: "s3"
      S3_ENDPOINT_URL: "http://minio:9000"
      S3_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      S3_BUCKET_NAME: "openwebui"
      S3_USE_SSL: "false"
      # Redis cache
      REDIS_URL: redis://redis:6379/0
      ENABLE_WEBSOCKET_SUPPORT: true
      # STT (whisper)
      AUDIO_STT_ENGINE: "openai"
      AUDIO_STT_OPENAI_API_BASE_URL: "https://whisper.itkdev.dk/"
      AUDIO_STT_OPENAI_API_KEY: ${STT_API_KEY}
      # TTS (piper)
      AUDIO_TTS_ENGINE: "openai"
      AUDIO_TTS_OPENAI_API_BASE_URL: "https://tts.itkdev.dk/"
      AUDIO_TTS_OPENAI_API_KEY: ${TTS_API_KEY}
      # Default prompts
      TITLE_GENERATION_PROMPT_TEMPLATE: "### Opgave:\nGener√©r en kort, 3-5 ords titel med en emoji, der opsummerer chat-historikken.\n \n### Retningslinjer:\n- Titlen skal tydeligt repr√¶sentere hovedtemaet eller emnet for samtalen.\n- Brug emojis, der underst√∏tter forst√•elsen af emnet, men undg√• citationstegn eller s√¶rlig formatering.\n- Skriv titlen p√• samtalens prim√¶re sprog; brug dansk som standard, hvis sproget er blandet.\n- Priorit√©r pr√¶cision frem for overdreven kreativitet; hold det klart og enkelt.\n- Dit svar skal udelukkende best√• af JSON-objektet, uden indledende eller afsluttende tekst.\n- Output skal v√¶re √©t enkelt r√•t JSON-objekt, uden markdown-kodeblokke eller anden indkapsling.\n- S√∏rg for, at der ikke kommer samtaletekst, bekr√¶ftelser eller forklaringer f√∏r eller efter JSON-outputtet, da dette vil medf√∏re fejl i parsningen.\n \n### Output:\nJSON-format: { \"title\": \"din korte titel her\" }\n \n### Eksempler:\n- { \"title\": \"üìâ Tendens i data\" }\n- { \"title\": \"üç™ Dagens kantinemenu\" }\n- { \"title\": \"Musikstreamingens udvikling\" }\n- { \"title\": \"Tips til hjemmearbejde\" }\n- { \"title\": \"Kunstig intelligens i sundhedsv√¶senet\" }\n- { \"title\": \"üéÆ Indblik i spiludvikling\" }\n \n### Chat-historik:\n<chat_history>\n{{MESSAGES:END:2}}\n</chat_history>"
      TAGS_GENERATION_PROMPT_TEMPLATE: "### Opgave:\nGener√©r 1-3 brede tags, der kategoriserer hovedtemaerne i chat-historikken, samt 1-3 mere specifikke undertags.\n\n### Retningslinjer:\n- Start med overordnede dom√¶ner (fx Sundhed, Kultur, Borgerservice, Teknik, Milj√∏, Omsorg, Sport, Fritid, Administration, Uddannelse).\n- Overvej at inkludere relevante underomr√•der, hvis de er tydeligt repr√¶senteret i samtalen.\n- Hvis indholdet er for kort (under 3 beskeder) eller for varieret, brug kun [\"Generelt\"].\n- Skriv tags p√• samtalens prim√¶re sprog; brug dansk som standard, hvis sproget er blandet.\n- Priorit√©r pr√¶cision frem for overdreven specificitet.\n\n### Output:\nJSON-format: { \"tags\": [\"tag1\", \"tag2\", \"tag3\"] }\n\n### Chat-historik:\n<chat_history>\n{{MESSAGES:END:6}}\n</chat_history>"
      FOLLOW_UP_GENERATION_PROMPT_TEMPLATE: "### Opgave:\nForesl√• 3-5 relevante opf√∏lgende sp√∏rgsm√•l eller prompts p√• samtalens prim√¶re sprog, som brugeren naturligt kunne stille i denne samtale som **bruger**, baseret p√• chat-historikken, for at hj√¶lpe med at forts√¶tte eller uddybe diskussionen.\n\n### Retningslinjer:\n- Skriv alle opf√∏lgende sp√∏rgsm√•l fra brugerens synspunkt, rettet mod assistenten.\n- G√∏r sp√∏rgsm√•lene korte, klare og direkte relateret til de emner, der er dr√∏ftet.\n- Foresl√• kun opf√∏lgninger, der giver mening i forhold til indholdet, og undg√• gentagelser.\n- Hvis samtalen er meget kort eller ukonkret, foresl√• mere generelle (men relevante) opf√∏lgende sp√∏rgsm√•l.\n- Brug samtalens prim√¶re sprog; brug dansk som standard, hvis sproget er blandet.\n- Svaret skal v√¶re et JSON-array af strenge, uden ekstra tekst eller formattering.\n\n### Output:\nJSON-format: { \"follow_ups\": [\"Sp√∏rgsm√•l 1?\", \"Sp√∏rgsm√•l 2?\", \"Sp√∏rgsm√•l 3?\"] }\n\n### Chat-historik:\n<chat_history>\n{{MESSAGES:END:6}}\n</chat_history>"
      # WAS
      WAS_REDIRECT_URL: ${WAS_REDIRECT_URL:-"https://was.digst.dk/ai-aarhuskommune-dk"}
      # LOGO
      LOGO_URL: ${LOGO_URL:-"https://designguide.aarhus.dk/media/i1kjp3l1/png-lang-venstrejusteret-negativ-png-8-kb.png?format=noformat"}
      # LOGIN INFO BANNER
      SYSTEM_REGISTER_URL: ${SYSTEM_REGISTER_URL:-"http://www.example.com"}
      SYSTEM_REGISTER_GUIDE_URL: ${SYSTEM_REGISTER_GUIDE_URL:-"http://www.example.org"}
    networks:
      - app
      - frontend
    ports:
      - "8080"
    depends_on:
      postgres:
        condition: service_healthy
      tika:
        condition: service_healthy
      litellm:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-init:
          condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health/db" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    cap_add:
      - SYS_ADMIN
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./open-webui:/app
      - .docker/start.sh:/app/backend/start.sh
      - .docker/data/storage:/app/backend/data
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=frontend"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.rule=Host(`${COMPOSE_DOMAIN}`)"
  #      HTTPS config - uncomment to enable redirect from :80 to :443
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_HOST: localhost
    networks:
      - app
    ports:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - .docker/data/postgres:/var/lib/postgresql/data 

  node:
    build:
      dockerfile: Dockerfile
      context: .docker/node
      args:
        USER_ID: ${USER_ID:-1000}
        GROUP_ID: ${GROUP_ID:-1000}
    #restart: unless-stopped
    working_dir: /app
    #command: npm run build:watch
    volumes:
      - ./open-webui:/app

  tika:
    build:
      dockerfile: Dockerfile
      context: .docker/tika
    networks:
      - app
    healthcheck:
      test: [ "CMD", "wget", "-O", "/dev/null", "-q", "http://127.0.0.1:9998/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    ports:
      - "9998"

  litellm:
    image: ghcr.io/berriai/litellm:main-stable
    command: [
      "--config", "/app/config.yaml",
      "--detailed_debug",
      "--num_workers", "8"
    ]
    environment:
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY:-sk-1234}
      LITELLM_SALT_KEY: ${LITELLM_SALT_KEY:-sk-1234}
    networks:
      - app
    ports:
      - "4000"
    healthcheck:
      test: [ "CMD", "wget", "-O", "/dev/null", "-q", "http://127.0.0.1:4000/health/liveliness" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./litellm_config.yaml:/app/config.yaml

  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - app
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin};
      /usr/bin/mc mb --ignore-existing myminio/openwebui;
      exit 0;
      "

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    networks:
      - app
      - frontend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - .docker/data/minio:/data
    command: server /data --console-address ":9001"
    ports:
      # API port
      - "9000"
      # Console port
      - "9001"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=frontend"
      # MinIO API
      - "traefik.http.routers.minio-api-${COMPOSE_PROJECT_NAME}.rule=Host(`minio-api.${COMPOSE_DOMAIN}`)"
      - "traefik.http.routers.minio-api-${COMPOSE_PROJECT_NAME}.service=minio-api-${COMPOSE_PROJECT_NAME}"
      - "traefik.http.services.minio-api-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=9000"
      # MinIO Console
      - "traefik.http.routers.minio-console-${COMPOSE_PROJECT_NAME}.rule=Host(`minio.${COMPOSE_DOMAIN}`)"
      - "traefik.http.routers.minio-console-${COMPOSE_PROJECT_NAME}.service=minio-console-${COMPOSE_PROJECT_NAME}"
      - "traefik.http.services.minio-console-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=9001"

  redis:
    image: redis:7.4.2-alpine3.21
    networks:
      - app
    ports:
      - "6379"