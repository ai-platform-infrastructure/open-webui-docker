include:
  - docker-compose.oidc.yml

networks:
  frontend:
    external: true
  app:
    driver: bridge
    internal: false

services:
  openwebui:
    build:
      dockerfile: Dockerfile
      context: open-webui
      args:
        USE_CUDA: false
        USE_OLLAMA: false
    command: [ "bash", "start.sh"]
    environment:
      # See https://docs.openwebui.com/getting-started/env-configuration/
      GLOBAL_LOG_LEVEL: DEBUG
      DATA_DIR: /app/backend/data
      ENV: ${ENV_MODE:-dev}
      PORT: 8080
      WEBUI_NAME: "ITK AI Platform"
      WEBUI_URL: "https://${COMPOSE_DOMAIN}"
      CORS_ALLOW_ORIGIN: ${CORS_ALLOW_ORIGIN:-*}
      USER_AGENT: ${USER_AGENT:-'Aarhus Kommune AI'}
      # OPEN TELEMETRY
      ENABLE_OTEL: ${ENABLE_OTEL:-false}
      # OIDC
      ENABLE_SIGNUP: true
      ENABLE_LOGIN_FORM: true
      ENABLE_OAUTH_SIGNUP: true
      # Important: Only use for AAK SSO/OIDC as we need to be able to trust the email provided!
      # Docs: "This is considered insecure as not all OAuth providers verify email addresses, and may allow accounts to be hijacked."
      # @see https://docs.openwebui.com/features/sso/#oauth
      OAUTH_MERGE_ACCOUNTS_BY_EMAIL: true
      OAUTH_CLIENT_ID: ${OAUTH_CLIENT_ID}
      OAUTH_CLIENT_SECRET: ${OAUTH_CLIENT_SECRET}
      OPENID_PROVIDER_URL: ${OPENID_PROVIDER_URL}
      OAUTH_PROVIDER_NAME: ${OAUTH_PROVIDER_NAME}
      # Change the default claims mapping.
      OAUTH_EMAIL_CLAIM: ${OAUTH_EMAIL_CLAIM:-upn}
      OAUTH_ROLES_CLAIM: ${OAUTH_ROLES_CLAIM:-role}
      ENABLE_OAUTH_ROLE_MANAGEMENT: ${ENABLE_OAUTH_ROLE_MANAGEMENT:-true}
      OAUTH_ALLOWED_ROLES: ${OAUTH_ALLOWED_ROLES:-admin,user}
      OAUTH_ADMIN_ROLES: ${OAUTH_ADMIN_ROLES:-admin}
      # RAG
      RAG_EMBEDDING_MODEL: ${RAG_EMBEDDING_MODEL:-intfloat/multilingual-e5-large}
      # Disable ollama as default, prevent UI from freezing when not available on localhost.
      ENABLE_OLLAMA_API: false
      OLLAMA_BASE_URL: 'http://localhost:11434'
      # Disable OpenAI.
      ENABLE_OPENAI_API: false
      # Postgres setup
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres
      # MinIO configuration
      STORAGE_PROVIDER: "s3"
      S3_ENDPOINT_URL: "http://minio:9000"
      S3_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      S3_BUCKET_NAME: "openwebui"
      S3_USE_SSL: "false"
    networks:
      - app
      - frontend
    ports:
      - "8080"
    depends_on:
      postgres:
        condition: service_healthy
      tika:
        condition: service_healthy
      litellm:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-init:
          condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health/db" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    cap_add:
      - SYS_ADMIN
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./open-webui:/app
      - .docker/start.sh:/app/backend/start.sh
      - .docker/data/storage:/app/backend/data
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=frontend"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.rule=Host(`${COMPOSE_DOMAIN}`)"
  #      HTTPS config - uncomment to enable redirect from :80 to :443
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_HOST: localhost
    networks:
      - app
    ports:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - .docker/data/postgres:/var/lib/postgresql/data 

  node:
    image: node:22-alpine3.20
    restart: unless-stopped
    working_dir: /app
    command: npm run build:watch
    volumes:
      - ./open-webui:/app

  tika:
    build:
      dockerfile: Dockerfile
      context: .docker/tika
    networks:
      - app
    healthcheck:
      test: [ "CMD", "wget", "-O", "/dev/null", "-q", "http://127.0.0.1:9998/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    ports:
      - "9998"

  litellm:
    image: ghcr.io/berriai/litellm:main-stable
    command: [
      "--config", "/app/config.yaml",
      "--detailed_debug",
      "--num_workers", "8"
    ]
    environment:
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY:-sk-1234}
      LITELLM_SALT_KEY: ${LITELLM_SALT_KEY:-sk-1234}
    networks:
      - app
    ports:
      - "4000"
    healthcheck:
      test: [ "CMD", "wget", "-O", "/dev/null", "-q", "http://127.0.0.1:4000/health/liveliness" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./litellm_config.yaml:/app/config.yaml

  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - app
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin};
      /usr/bin/mc mb --ignore-existing myminio/openwebui;
      exit 0;
      "

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    networks:
      - app
      - frontend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - .docker/data/minio:/data
    command: server /data --console-address ":9001"
    ports:
      # API port
      - "9000"
      # Console port
      - "9001"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=frontend"
      # MinIO API
      - "traefik.http.routers.minio-api-${COMPOSE_PROJECT_NAME}.rule=Host(`minio-api.${COMPOSE_DOMAIN}`)"
      - "traefik.http.routers.minio-api-${COMPOSE_PROJECT_NAME}.service=minio-api-${COMPOSE_PROJECT_NAME}"
      - "traefik.http.services.minio-api-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=9000"
      # MinIO Console
      - "traefik.http.routers.minio-console-${COMPOSE_PROJECT_NAME}.rule=Host(`minio.${COMPOSE_DOMAIN}`)"
      - "traefik.http.routers.minio-console-${COMPOSE_PROJECT_NAME}.service=minio-console-${COMPOSE_PROJECT_NAME}"
      - "traefik.http.services.minio-console-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=9001"

  mcpo:
    build:
      dockerfile: Dockerfile
      context: .docker/mcpo
    networks:
      - app
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "8000"
    volumes:
      - ./mcpo_config.json:/config.json

  mcp-weather:
    image: itkdev/mcp-sse-weather
    networks:
      - app
    ports:
      - "9000"
    environment:
      # https://www.weatherapi.com
      WEATHER_API_KEY: ${WEATHER_API_KEY}